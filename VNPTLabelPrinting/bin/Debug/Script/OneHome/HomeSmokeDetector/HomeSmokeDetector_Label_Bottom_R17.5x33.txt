/*
Version=OHSDZ0VN0U0001
BuildTime=14/04/2021 08:56
Copyright=Copyright of VNPT Technology 2021
Product=HOME SMOKE DETECTOR
Station=BOTTOM LABEL
About={
Version=OHSDZ0VN0U0001;Content=- Xây dựng phần mềm in tem đáy one home - home smoke detector;Date=14/04/2021;Type=Tạo mới;Person=Hồ Đức Anh
}
*/

using System;
using System.Text;
using System.Net.NetworkInformation;
using System.Threading;
using System.Text.RegularExpressions;
using System.Linq;
using System.Collections.Generic;
using Automation;

namespace ONEHOME {

    public class HomeSmokeDetector_LabelBottom {

	[STAThread]
	static void Main() { }
	
		public string logSystem {get;set;}
		
		//[Yes]
		public bool LabelBottomHomeSmokeDetector(string setting_layout_file, string setting_printer_name, string setting_copies, string setting_dongle_serial_port_name, string setting_dongle_serial_baud_rate, string setting_product_number, string setting_dongle_lqi, string setting_dongle_max_client, string setting_factory, string setting_hardware_version, string setting_product_color, out string barcode_dummy){
			bool r = false;
			barcode_dummy = "";
			setting_layout_file = string.Format("{0}Layout\\{1}", AppDomain.CurrentDomain.BaseDirectory, setting_layout_file);
			logSystem += string.Format("> dummy barcode: {0}\n", barcode_dummy);
			
			//get eui from product
			var homeDongle = new HomeUSBDongleHelper(setting_dongle_serial_port_name, setting_dongle_serial_baud_rate);
			logSystem += string.Format("> set LQI = {0}.\n", setting_dongle_lqi);
			homeDongle.setLQI(setting_dongle_lqi);
			logSystem += string.Format("> open network dongle.\n");
			homeDongle.openNetwork();
			string msg = "";
			string barcode_uid = homeDongle.getEUI(out msg);
			logSystem += string.Format("> get eui from product: '{0}'\n",barcode_uid);
			logSystem += string.Format("> {0}\n",msg);
			if (barcode_uid == null || barcode_uid == "") {
				r = false;
				goto END;
			}
			var uids = IO.FromFile("uid.txt");
			r = Parser.isStringExistInList(barcode_uid, uids);
			barcode_dummy = barcode_uid;
			if(r){
				r = false;
				logSystem += string.Format("> the product has just been printed.\n");
				goto END;
			}
			
			//check barcode_uid format
			string pattern = "^[0-9,A-F]{16}$";
			r = Regex.IsMatch(barcode_uid, pattern, RegexOptions.IgnoreCase);
			logSystem += string.Format("> check uid barcode with pattern {0}: {1}\n", pattern, r);
			if(!r) goto END;
			
			//gen serial number
			string serial_number = Automation.Converter.oneHomeUidToFactorySerialNumber(barcode_uid, setting_product_number, setting_factory, setting_hardware_version, setting_product_color);
			logSystem += string.Format("> gen from uid to factory serial number: {0}\n", serial_number);
			if (serial_number == null) {
				r = false;
				goto END;
			}
			
			//printing label
			var bartender = new BartenderHelper();
			var UID = new BartenderHelper.ItemVariable() { Name = "UID", Value = barcode_uid };
			var DATE = new BartenderHelper.ItemVariable() { Name = "DATE", Value = DateTime.Now.ToString("MM/yyyy") };
			var SN = new BartenderHelper.ItemVariable() { Name = "SN", Value = serial_number };
			
			r = bartender.printLabel(setting_layout_file, setting_printer_name, setting_copies, UID, SN, DATE);
			bartender.Dispose();
			
			logSystem += string.Format("> printing label: {0}\n", r);
			IO.ToFile("uid.txt",uids, barcode_uid);
			
			
			END:
			var counter = homeDongle.getCounter(out msg);
			logSystem += string.Format("> client counter: {0}\n", counter);
			if (counter == null) {}
			else {
				if (counter > int.Parse(setting_dongle_max_client)) {
					logSystem += string.Format("> reset home dongle.\n");
					homeDongle.Reset();
				}
			}
			logSystem += string.Format("> close network dongle.\n");
			homeDongle.closeNetwork();
			homeDongle.Dispose();
			return r;
		}
		
		
		
    }
}
